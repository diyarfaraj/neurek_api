// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using neurek.Data;

namespace neurek.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211010162112_ExtendedUserEntity")]
    partial class ExtendedUserEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("neurek.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("neurek.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("neurek.Entities.CandidateAbout", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AboutMe")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FullTimeEmployment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RemoteWork")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeOfEmployment")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CandidateAbout");
                });

            modelBuilder.Entity("neurek.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("neurek.Entities.CompanyUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyUser");
                });

            modelBuilder.Entity("neurek.Entities.Candidate", b =>
                {
                    b.HasOne("neurek.Entities.AppUser", "AppUser")
                        .WithOne("Candidate")
                        .HasForeignKey("neurek.Entities.Candidate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("neurek.Entities.CandidateAbout", b =>
                {
                    b.HasOne("neurek.Entities.Candidate", "Candidate")
                        .WithOne("CandidateAbout")
                        .HasForeignKey("neurek.Entities.CandidateAbout", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("neurek.Entities.CompanyUser", b =>
                {
                    b.HasOne("neurek.Entities.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("neurek.Entities.AppUser", "AppUser")
                        .WithOne("CompanyUser")
                        .HasForeignKey("neurek.Entities.CompanyUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("neurek.Entities.AppUser", b =>
                {
                    b.Navigation("Candidate");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("neurek.Entities.Candidate", b =>
                {
                    b.Navigation("CandidateAbout");
                });

            modelBuilder.Entity("neurek.Entities.Company", b =>
                {
                    b.Navigation("CompanyUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
